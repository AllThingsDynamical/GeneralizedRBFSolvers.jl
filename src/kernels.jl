
abstract type RKHSKernels end

struct SquaredExponentialKernel <: RKHSKernels
    σ1::Float64
    σ2::Float64
    σ3::Float64
end

function get_kernels(kernel::SquaredExponentialKernel)
    σ1 = kernel.σ1
    σ2 = kernel.σ2
    σ3 = kernel.σ3
    #---------------------------------------------------------------------#
    
    k00 = k0y0 = (x1,x2,x3,y1,y2,y3) -> exp(-((x1-y1)/σ1)^2 -((x2-y2)/σ2)^2 - ((x3-y3)/σ3)^2)
    k0y1 = (x1,x2,x3,y1,y2,y3) -> (2*(x1-y1)/σ1^2)*k00(x1,x2,x3,y1,y2,y3)
    k0y2 = (x1,x2,x3,y1,y2,y3) -> (2*(x2-y2)/σ2^2)*k00(x1,x2,x3,y1,y2,y3)
    k0y3 = (x1,x2,x3,y1,y2,y3) -> (2*(x3-y3)/σ3^2)*k00(x1,x2,x3,y1,y2,y3)
    k0y12 = (x1,x2,x3,y1,y2,y3) -> ((-2/σ1^2) + 4*(x1-y1)^2 / σ1^4)*k00(x1,x2,x3,y1,y2,y3)
    k0y22 = (x1,x2,x3,y1,y2,y3) -> ((-2/σ2^2) + 4*(x2-y2)^2 / σ2^4)*k00(x1,x2,x3,y1,y2,y3)
    k0y32 = (x1,x2,x3,y1,y2,y3) -> ((-2/σ3^2) + 4*(x3-y3)^2 / σ3^4)*k00(x1,x2,x3,y1,y2,y3)
    #---------------------------------------------------------------------#

    kx1y0 = (x1,x2,x3,y1,y2,y3) -> (-2*(x1-y1)/σ1^2)*k00(x1,x2,x3,y1,y2,y3)
    kx1y1 = (x1,x2,x3,y1,y2,y3) -> ((2/σ1^2) - 4*(x1-y1)^2 / σ1^4)*k00(x1,x2,x3,y1,y2,y3)
    kx1y2 = (x1,x2,x3,y1,y2,y3) -> -4*(x2-y2)*(x1-y1)/(σ2^2 * σ1^2)*k00(x1,x2,x3,y1,y2,y3)
    kx1y3 = (x1,x2,x3,y1,y2,y3) -> -4*(x3-y3)*(x1-y1)/(σ3^2 * σ1^2)*k00(x1,x2,x3,y1,y2,y3)
    kx1y12 = (x1,x2,x3,y1,y2,y3) -> (12*(x1-y1)/ σ1^4 - 8*(x1-y1)^3/ σ1^6)*k00(x1,x2,x3,y1,y2,y3)
    kx1y22 = (x1,x2,x3,y1,y2,y3) -> (4*(x1-y1) / (σ2^2 * σ1^2) - 8*(x2-y2)^2 * (x1-y1) / (σ2^4 * σ1^2))*k00(x1,x2,x3,y1,y2,y3)
    kx1y32 = (x1,x2,x3,y1,y2,y3) -> (4*(x1-y1) / (σ3^2 * σ1^2) - 8*(x3-y3)^2 * (x1-y1) / (σ3^4 * σ1^2))*k00(x1,x2,x3,y1,y2,y3)
    #---------------------------------------------------------------------#

    kx2y0 = (x1,x2,x3,y1,y2,y3) -> (-2*(x2 - y2)/σ2^2)*k00(x1,x2,x3,y1,y2,y3)
    kx2y1 = (x1,x2,x3,y1,y2,y3) -> -4*(x2-y2)*(x1-y1)/(σ2^2 * σ1^2)*k00(x1,x2,x3,y1,y2,y3)
    kx2y2 = (x1,x2,x3,y1,y2,y3) -> (2/σ2^2 - 4*(x2-y2)^2 / σ2^4)*k00(x1,x2,x3,y1,y2,y3)
    kx2y3 = (x1,x2,x3,y1,y2,y3) -> -4*(x2-y2)*(x3-y3)/(σ2^2 * σ3^2)*k00(x1,x2,x3,y1,y2,y3)
    kx2y12 = (x1,x2,x3,y1,y2,y3) -> (4*(x2-y2) / (σ2^2 * σ1^2) - 8*(x2-y2)*(x1-y1)^2/(σ2^2 * σ1^4))*k00(x1,x2,x3,y1,y2,y3)
    kx2y22 = (x1,x2,x3,y1,y2,y3) -> ((12*(x2-y2) / σ2^4) - (8*(x2-y2)^3 / σ2^6))*k00(x1,x2,x3,y1,y2,y3)
    kx2y32 = (x1,x2,x3,y1,y2,y3) -> ((4*(x2-y2)/ σ2^2*σ3^2)-(8*(x2-y2)*(x3-y3)^2 / (σ2^2 * σ3^4)))*k00(x1,x2,x3,y1,y2,y3)
    #---------------------------------------------------------------------#

    kx3y0 = (x1,x2,x3,y1,y2,y3) -> (-2*(x3 - y3)/σ3^2)*k00(x1,x2,x3,y1,y2,y3)
    kx3y1 = (x1,x2,x3,y1,y2,y3) -> (-4*(x3 - y3)*(x1 - y1) / (σ3^2 * σ1^2))*k00(x1,x2,x3,y1,y2,y3)
    kx3y2 = (x1,x2,x3,y1,y2,y3) -> (-4*(x3 - y3)*(x2 - y2) / (σ2^2 * σ3^2))*k00(x1,x2,x3,y1,y2,y3)
    kx3y3 = (x1,x2,x3,y1,y2,y3) -> (2/σ3^2 - 4*(x3-y3)^2 / σ3^4)*k00(x1,x2,x3,y1,y2,y3)
    kx3y12 = (x1,x2,x3,y1,y2,y3) -> (4*(x3-y3)/(σ3^2 * σ1^2) - 8*(x3-y3)*(x1-y1)^2 / (σ3^2 * σ1^4))*k00(x1,x2,x3,y1,y2,y3)
    kx3y22 = (x1,x2,x3,y1,y2,y3) -> (4*(x3-y3) / (σ2^2 * σ3^2) - 8*(x2-y2)^2 * (x3-y3) / (σ2^4 * σ3^2))*k00(x1,x2,x3,y1,y2,y3)
    kx3y32 = (x1,x2,x3,y1,y2,y3) -> (12*(x3-y3) / σ3^4 - 8*(x3-y3)^3 / σ3^6)*k00(x1,x2,x3,y1,y2,y3)
    #---------------------------------------------------------------------#

    kx12y0 = (x1,x2,x3,y1,y2,y3) -> (-2/σ1^2 + 4*(x1-y1)^2 / σ1^4)*k00(x1,x2,x3,y1,y2,y3)
    kx12y1 = (x1,x2,x3,y1,y2,y3) -> (-12*(x1-y1) / σ1^4 + 8*(x1-y1)^3 / σ1^6)*k00(x1,x2,x3,y1,y2,y3)
    kx12y2 = (x1,x2,x3,y1,y2,y3) -> (-4*(x2-y2)/(σ2^2 * σ1^2) + 8*(x2-y2)*(x1-y1)^2 / (σ2^2 * σ1^4))*k00(x1,x2,x3,y1,y2,y3)
    kx12y3 = (x1,x2,x3,y1,y2,y3) -> (-4*(x3-y3)/(σ3^2 * σ1^2) + 8*(x3-y3)*(x1-y1)^2 / (σ3^2 * σ1^4))*k00(x1,x2,x3,y1,y2,y3)
    kx12y12 = (x1,x2,x3,y1,y2,y3) -> (12/σ1^4 - 48*(x1-y1)^2/σ1^6 + 16*(x1-y1)^4/σ1^8)*k00(x1,x2,x3,y1,y2,y3)
    kx12y22 = (x1,x2,x3,y1,y2,y3) -> (4/(σ2^2 * σ1^2) - 8*(x2-y2)^2 / (σ2^4 * σ1^2) 
                            - 8*(x1-y1)^2 / (σ2^2 * σ1^4) + 16*(x2-y2)^2 * (x1-y1)^2 / (σ2^4 * σ1^4))*k00(x1,x2,x3,y1,y2,y3)
    kx12y32 = (x1,x2,x3,y1,y2,y3) -> (4/(σ3^2 * σ1^2) - 8*(x3-y3)^2 / (σ3^4 * σ1^2) 
    - 8*(x1-y1)^2 / (σ3^2 * σ1^2) + 16*(x3-y3)^2 * (x1-y1)^2 / (σ3^4 * σ1^4))*k00(x1,x2,x3,y1,y2,y3)
    #---------------------------------------------------------------------#

    kx22y0 = (x1,x2,x3,y1,y2,y3) -> (-2/σ2^2 + 4*(x2-y2)^2 / σ2^4)*k00(x1,x2,x3,y1,y2,y3)
    kx22y1 = (x1,x2,x3,y1,y2,y3) -> (-4*(x1-y1)/(σ2^2 * σ1^2) + 8*(x2-y2)^2*(x1-y1) / (σ1^2 * σ2^4))*k00(x1,x2,x3,y1,y2,y3)
    kx22y2 = (x1,x2,x3,y1,y2,y3) -> (-12*(x2-y2) / σ2^4 + 8*(x2-y2)^3 / σ2^6)*k00(x1,x2,x3,y1,y2,y3)
    kx22y3 = (x1,x2,x3,y1,y2,y3) -> (-4*(x3-y3) / (σ2^2 * σ3^2) + 8*(x2-y2)^2 * (x3-y3) / (σ2^2 * σ1^4))*k00(x1,x2,x3,y1,y2,y3)
    kx22y12 = (x1,x2,x3,y1,y2,y3) -> (4/(σ2^2 * σ1^2) - 8*(x2-y2)^2 / (σ2^4 * σ1^2) 
                            - 8*(x1-y1)^2 / (σ2^2 * σ1^4) + 16*(x2-y2)^2 * (x1-y1)^2 / (σ2^4 * σ1^4))*k00(x1,x2,x3,y1,y2,y3)
    kx22y22 = (x1,x2,x3,y1,y2,y3) -> (12/σ2^4 - 48*(x2-y2)^2 / σ2^6 + 16*(x2-y2)^4 / σ2^8)*k00(x1,x2,x3,y1,y2,y3)
    kx22y32 = (x1,x2,x3,y1,y2,y3) -> (4 / (σ2^2 * σ3^2) - 8*(x3-y3)^2 / (σ2^2 * σ3^4) - 8*(x2-y2)^2 / (σ2^4 * σ3^2)
                                        + 16*(x2-y2)^2 * (x3-y3)^2 / (σ2^4 * σ3^4))*k00(x1,x2,x3,y1,y2,y3)
    #---------------------------------------------------------------------#

    kx32y0 = (x1,x2,x3,y1,y2,y3) -> (-2/σ3^2 + 4*(x3-y3)^2 / σ3^4)*k00(x1,x2,x3,y1,y2,y3)
    kx32y1 = (x1,x2,x3,y1,y2,y3) -> (-4*(x1-y1) / (σ3^2 * σ1^2) + 8*(x3-y3)^2 * (x1-y1) / (σ3^4 * σ1^2))*k00(x1,x2,x3,y1,y2,y3)
    kx32y2 = (x1,x2,x3,y1,y2,y3) -> (-4*(x2-y2) / (σ3^2 * σ2^2) + 8*(x3-y3)^2 * (x2-y2) / (σ3^4 * σ2^2))*k00(x1,x2,x3,y1,y2,y3)
    kx32y3 = (x1,x2,x3,y1,y2,y3) -> (-12*(x3 - y3)/σ3^4 + 8*(x3 - y3)^3/σ3^6)*k00(x1,x2,x3,y1,y2,y3)
    kx32y12 = (x1,x2,x3,y1,y2,y3) -> (4/(σ3^2*σ1^2) - 8*(x3 - y3)^2/(σ3^4*σ1^2) 
                            - 8*(x1 - y1)^2/(σ3^2*σ1^4) + 16*(x3 - y3)^2*(x1 - y1)^2/(σ3^4*σ1^4))*k00(x1,x2,x3,y1,y2,y3)
    kx32y22 = (x1,x2,x3,y1,y2,y3) -> (4/(σ2^2*σ3^2) - 8*(x3 - y3)^2/(σ2^2*σ3^4) 
                            - 8*(x2 - y2)^2/(σ2^4*σ3^2) + 16*(x2 - y2)^2*(x3 - y3)^2/(σ2^4*σ3^4))*k00(x1,x2,x3,y1,y2,y3)
    kx32y32 = (x1,x2,x3,y1,y2,y3) -> (12/σ3^4 - 48*(x3 - y3)^2/σ3^6 + 16*(x3 - y3)^4/σ3^8)*k00(x1,x2,x3,y1,y2,y3)
    #---------------------------------------------------------------------#

    Kernel_collector = [k0y0 k0y1 k0y2 k0y3 k0y12 k0y22 k0y32;
                        kx1y0 kx1y1 kx1y2 kx1y3 kx1y12 kx1y22 kx1y32;
                        kx2y0 kx2y1 kx2y2 kx2y3 kx2y12 kx2y22 kx2y32;
                        kx3y0 kx3y1 kx3y2 kx3y3 kx3y12 kx3y22 kx3y32;
                        kx12y0 kx12y1 kx12y2 kx12y3 kx12y12 kx12y22 kx12y32;
                        kx22y0 kx22y1 kx22y2 kx22y3 kx22y12 kx22y22 kx22y32;
                        kx32y0 kx32y1 kx32y2 kx32y3 kx32y12 kx32y22 kx32y32;
                        ]
    return Kernel_collector
end